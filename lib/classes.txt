class Logger {
		template <class T, typename... Args> void writeLog(int level, T msg, Args... args){
		template <class T, typename... Args> void fatal(T msg, Args... args){
		template <class T, typename... Args> void error(T msg, Args... args){
		template <class T, typename... Args> void warning(T msg, Args...args){
		template <class T, typename... Args> void info(T msg, Args...args){
		template <class T, typename... Args> void debug(T msg, Args... args){
class LogWriter{
		template <class T> 
class DummyLogWriter : public LogWriter{
		template <class T> 
class SerialLogWriter : public LogWriter{
class UdpLogWriter : public LogWriter{
class ScreenArea{
class TouchObserver: public ScreenArea{
class TouchControl: public TouchObserver{
class TouchEventNotifier{
class TouchEventHandler: public TouchEventNotifier{
class TouchHelperInterface{
class TouchHelper: public TouchHelperInterface{
class Screen{
class MainScreen: public Screen, public SensorObserver, public TimeObserver{
class TouchHelper{
class DataField{
	class ThingSpeakUtil{
class TimeObserver{
class TimeEventNotifier{
class TimeEventHandler{
class Sensor{
class BMESensorAdapter : public Sensor{
class RadioSensorListener : public Sensor{
class ThingSpeakSensor : public Sensor{
class SensorScheduler{
class SensorObserver{
class SensorEventNotifier{
class SensorDataCollector : public SensorEventNotifier{
